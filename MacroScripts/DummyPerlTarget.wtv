
############################################
#         Extention Script One		   #
#					   #
# Author: Eric-MacDonald		   #
# Date: 11/25/00			   #
#					   #
# PLEASE DO NOT EDIT THIS FILE UNLESS YOU  #
# YOU KNOW WHAT YOUR DOING                 #
############################################


On *:connect:1:{
#print $add "200 OK\n";
#print $add "wtv-service: host=209.240.194.41 port=1601 name=wtv-head-waiter\n";
#print $add "wtv-service: host=209.240.194.41 port=1607 name=wtv-register\n";
#print $add "Content-length: 5\n";
#print $add "Content-type: text/plain\n\n";
#print $add "12345";
if($SecurityLevel > 4 && ($sockhost ne $clienthost)){
print $clients "500 Server security violation.\n\n";
$pickcli->remove($clients);
close($clients)
}
open(FILE,">> $RealDir/LOG/EventLog.txt");
print FILE "Client Connected to server. ($iptoddd) ($formateddate)\n";
close(FILE);
return 1;
}


On *:disconnect:1:{
open(FILE,">> $RealDir/LOG/EventLog.txt");
print FILE "Client disonnected from server. ($clienthost:$clientport) ($formateddate)\n";
close(FILE);
return 1;
}


On *:close:1:{
open(FILE,">> $RealDir/LOG/EventLog.txt");
print FILE "The program has been closed/exited. ($clienthost:$clientport) ($formateddate)\n";
close(FILE);
return 1;
}


On *:open:1:{




open(FILE,">> $RealDir/LOG/EventLog.txt");
print FILE "The program has been open. Im listening on port $listenport on mode $mode\n";
close(FILE);


#Sorry peeps to many area codes.

%AreaCodes=("603" => "NH",
"207" => "Main",
"413" => "Mass",
"508" => "Mass",
"617" => "Mass",
"401" => "RI",
"201" => "NJ",
"908" => "NJ",
"609" => "NJ",
"860" => "CONN",
"203" => "CONN",
"202" => "W DC",
"540" => "Virginia",
"804" => "Virginia",
"703" => "Virginia",
"717" => "PA",
"610" => "PA",
"215" => "PA",
"814" => "PA",
"412" => "PA",
"516" => "NY",
"914" => "NY",
"607" => "NY",
"518" => "NY",
"315" => "NY",
"716" => "NY",
"212" => "NY",
"718" => "NY",
"707" => "CA",
"916" => "CA",
"415" => "CA",
"510" => "CA",
"408" => "CA",
"562" => "CA",
"805" => "CA",
"209" => "CA",
"909" => "CA",
"818" => "CA",
"213" => "CA",
"714" => "CA",
"619" => "CA",
"916" => "CA",
"806" => "Texas",
"817" => "Texas",
"214" => "Texas",
"281" => "Texas",
"903" => "Texas",
"409" => "Texas",
"713" => "Texas",
"512" => "Texas",
"210" => "Texas",
"915" => "Texas",
"806" => "Texas");

#Not going to drag out a large DNS host resolver to get the NX of a server.  So lets limit this to the follows.
%MailExchangers=("webtv.net" => "smtpinvite.mx.webtv.net",
"hotmail.com" => "mx1.hotmail.com",
"yahoo.com" => "mx1.mail.yahoo.com",
"aol.com" => "mailin-02.mx.aol.com",
"corp.webtv.net" => "maila.microsoft.com",
"microsoft.com" => "maila.microsoft.com"
);

%corespondToBuild=("" => "",
);

%corespondToBT=("00" => "Phillips",
"10" => "Sony",
"80" => "Echostar",
"40" => "RCA",
);




%contentTypes=("txt" => "text/plain",
"html" => "text/html",
"htm" => "text/html",
"shtml" => "text/html",
"tvml" => "text/html",
"tmp" => "text/html",
"tmpl" => "text/html",
"pl" => "text/plain",
"bmp" => "image/wtv-bitmap",
"trg" => "application/tve-trigger",
"al" => "wtv/addresses",
"url" => "text/url",
"ntc" => "wtv/notice",
"ts" => "text/tellyscript",
"rom" => "wtv/flashblock",
"ani" => "wtv/animation",
"dl" => "wtv/download-list",
"brom" => "wtv/bootrom",
"mpg" => "video/mpeg",
"mpeg" => "audio/mpeg",
"ra" => "audio/pn-realaudio",
"img" => "image",
"gif" => "image/gif",
"jpg" => "image/jpg",
"jpeg" => "image/jpeg",
"au" => "audio/au",
"mod" => "audio/mod",
"rmf" => "audio/rmf",
"midi" => "audio/midi",
"mid" => "audio/mid",
"wav" => "audio/wav",
"wave" => "audio/wave",
"xbm" => "image/xbm",
"pl" => "text/perl"
); 

sub SubValueWName {

open(FILE,"< $RealDir/ServiceVault/wtv-register/SubsituteValues.txt");
@arraydummy=<FILE>;
close(FILE);
$dummyvariable="";
$randNuM2=rand(777777);
$randNuM2=substr($randNuM2,0,index($randNuM2,"."));

if(!($randNuM2%6)){
$randNuM2=4;
}elsif(!($randNuM2%5)){
$randNuM2=3;
}else{
$randNuM2=2;
}

for($i=0; $i < ($randNuM2); $i++){
$counting=0;
$randNuM=rand(65);
$randNuM=substr($randNuM,0,index($randNuM,"."));

foreach $fakename (@arraydummy) {
if($fakename=~/\n/){
chop($fakename);
}
$counting++;
if($counting == $randNuM){
$dummyvariable.=$fakename;
}
}
}
return $dummyvariable;
}


sub ThingsToDo {
$MyLoc=matchInDB($clienthost,1);
if(($MyLoc eq "NOPE")){
addToDB($clienthost,1,$clienthost);
$MyLoc = $clienthost;
}

if($command eq "wtv-client-serial-number:"){
if(matchInDB($clienthost,2,1) eq "NOPE"){
chop($params);
addToDB($MyLoc,2,$params);
}
}
if($command eq "wtv-system-version:"){
if(matchInDB($clienthost,3,1) eq "NOPE"){
chop($params);
addToDB($MyLoc,3,$params);
}
}
if($command eq "wtv-system-chipversion:"){
if(matchInDB($clienthost,4,1) eq "NOPE"){
chop($params);
addToDB($MyLoc,4,$params);
}
}
if($command eq "wtv-system-sysconfig:"){
if(matchInDB($clienthost,5,1) eq "NOPE"){
chop($params);
addToDB($MyLoc,5,$params);
}

}
if($command eq "wtv-client-rom-type:"){
if(matchInDB($clienthost,6,1) eq "NOPE"){
chop($params);
addToDB($MyLoc,6,$params);
}

}
if($command eq "wtv-client-bootrom-version:"){
if(matchInDB($clienthost,7,1) eq "NOPE"){
chop($params);
addToDB($MyLoc,7,$params);
}
}
if($command eq "wtv-script-id:"){
if(matchInDB($clienthost,9,1) eq "NOPE"){
chop($params);
addToDB($MyLoc,9,$params);
}
}





$userromtype=getformDB($MyLoc,6);
$userbootromversion=getformDB($MyLoc,7);
$usersysconfig=getformDB($MyLoc,5);
$userchipversion=getformDB($MyLoc,4);
$userclientbuild=getformDB($MyLoc,3);
$userssid=getformDB($MyLoc,2);
$userscript=getformDB($MyLoc,9);
if(!($userboxtype=$corespondToBT{substr($userssid,8,2)})){
$userboxtype="Viewer"
}




$command=lc($command);
if($command eq "get" || $command eq "post"){


$tosendout="";
$buffererd="";
$buffererdx="";
do("$RealDir/ServiceVault/ProtoFinder.pl");

$protocol=substr($params,0,index($params,":"));
$url=substr($params,index($params,":")+1);
$url=(substr($url,0,1) eq "/") ? substr($url,1) : $url;
$url2=substr($url,0,rindex($url,"?"));
$hashlocation=substr($url2,rindex($url2,"#"));
$qurey=substr($url,rindex($url,"?")+1);

if(index($url2,"/") eq -1){
$rootdirectory="";

}else{
$rootdirectory=substr($url2,0,rindex($url2,"/")+1);
}
$OUT->FillAttr($FG_MAGENTA | $BG_BLACK, 80, $Info[1] ,$Info[2]);

#print "This is what I recieved $protocol $url2\n";
if(open(FILEz,"< $RealDir/ServiceVault/$protocol/$url2.txt")){
@stuffinherezzzz=<FILEz>;
close(FILEz);
if($skratchheaders){
print $clients "$skratchheaders";
}

foreach $lineazzzz (@stuffinherezzzz) {
$buffererd.=$lineazzzz;
}

if(length($buffererd) eq 0){
print $clients "500 There is no information in the item requested.  (Eric-Mac's Server Message)\n\n";
$closewhendone=1;

}else{
$buffererd=processChange($buffererd);
print $clients $buffererd;
}
}else{


if(open(FILEz,"< $RealDir/ServiceVault/$protocol/$url2.pl")){
close(FILEz);

if($skratchheaders){
print $clients "$skratchheaders";

}

if(!(do "$RealDir/ServiceVault/$protocol/$url2.pl")){
#print "Giveing error init\n";
$tosendout="There was a parse error while reading file $protocol/$url2.pl.  The reson why is as follows:\n\n$@" if $@;
$tosendout.="There was a error while mr bob was trying to read the program!\n\n$!" if $!;

print $clients "200 OK\n";
print $clients "Content-Length: ".length($tosendout)."\n";
print $clients "Content-Type: text/plain\n\n";
print $clients $tosendout;
#print "Giveing error exit\n";
$closewhendone=1;

}
}else{



if(open(FILEz, "< $RealDir/ServiceVault/$url2") && (substr($url2,0,9) eq "ROMCache/")){
binmode(FILEz); 
$size=-s FILEz;
read(FILEz,$buffererd,$size,0);
close(FILEz);

$fileExt=substr($url2,rindex($url2,".")+1);
$messure=length($buffererd);

if($contentTypes{$fileExt}){
$sas=$contentTypes{$fileExt};
}else{
$sas="bad/type";
}
if($skratchheaders){
print $clients "$skratchheaders";
}

print $clients "200 OK\n";
print $clients "Content-Length: $messure\n";
print $clients "Content-Type: $sas\n\n";
print $clients $buffererd;



}else{
if(open(FILEz, "< $RealDir/ServiceVault/$protocol/$url2")){
$fileExt=substr($url2,rindex($url2,".")+1);

@foobar=split(/\//,$url2);
if(($#foobar eq 1 || $#foobar eq 0) && ($fileExt eq "txt" || $fileExt eq "pl") && ($SecurityLevel > 0)){
print $clients "500 Ha!! Ha!! Nice try!!\n\n";
$closewhendone=1;

}else{

binmode(FILEz); 		   
$size=-s FILEz;
read(FILEz,$buffererd,$size,0);
close(FILEz);
 
if(open(FILEz,"< $RealDir/ServiceVault/$protocol/$rootdirectory"."filectrl.pl")){

close(FILEz);
if($skratchheaders){
print $clients "$skratchheaders";
}

if(!(do "$RealDir/ServiceVault/$protocol/$rootdirectory"."filectrl.pl")){
$tosendout="There was a parse errorwhile reading file $protocol/$rootdirectory/filectrl.pl.  The reson why is as follows:\n\n$@" if $@;
$tosendout.="There was a error while mr bob was trying to read the program!\n\n$!" if $!;
if(!($skratchheaders)){
print $clients "200 OK\n";
print $clients "Content-Length: ".length($tosendout)."\n";
print $clients "Content-Type: text/plain\n\n";
}
print $clients $tosendout;
}

}else{
$messure=length($buffererd);
if($contentTypes{$fileExt}){
$sas=$contentTypes{$fileExt};
}else{
$sas="bad/type";
}
if($skratchheaders){
print $clients "$skratchheaders";
}
if($fileExt eq "pl"){
if(!(do "$RealDir/ServiceVault/$url2")){
#print "Giveing error init\n";
$tosendout="There was a parse error while reading file $protocol/$url2.pl.  The reson why is as follows:\n\n$@" if $@;
$tosendout.="There was a error while mr bob was trying to read the program!\n\n$!" if $!;
$error="400 Client request error." if $!;
$error="500 Server error." if $@;
print $clients "$error\n";
print $clients "Content-Length: ".length($tosendout)."\n";
print $clients "Content-Type: text/plain\n\n";
print $clients $tosendout;
}
}else{
print $clients "200 OK\n";
print $clients "Content-Length: $messure\n";
print $clients "Content-Type: $sas\n\n";
print $clients $buffererd;
}
}
}
}else{

if(open(FILEz,"< $RealDir/ServiceVault/$protocol/$rootdirectory"."default.pl")){
close(FILEz);
if($skratchheaders){
print $clients "$skratchheaders";
}

if(!(do "$RealDir/ServiceVault/$protocol/$rootdirectory"."default.pl")){
$tosendout="There was a parse error while reading file $protocol/$rootdirectory/default.pl.  The reson why is as follows:\n\n$@" if $@;
$tosendout.="There was a error while mr bob was trying to read the program!\n\n$!" if $!;
print $clients "200 OK\n";
print $clients "Content-Length: ".length($tosendout)."\n";
print $clients "Content-Type: text/plain\n\n";
print $clients $tosendout;
}

}else{
if(open(FILEz,"< $RealDir/ServiceVault/$protocol/default.txt")){


@stuffinherezzz=<FILEz>;
close(FILEz);
if($skratchheaders){
print $clients "$skratchheaders";
}
foreach $lineazzz (@stuffinherezzz) {
$buffererd.=$lineazzz;
}
if(length($buffererd) eq 0){
print $clients "500 There is no information in the item requested (Default file).  (Eric-Mac's Server Message)\n\n";
$closewhendone=1;

}else{
$buffererd=processChange($buffererd);

print $clients $buffererd;
}
}else{
if(opendir(DIR,"$RealDir/ServiceVault/$protocol")){
if($skratchheaders){
print $clients "$skratchheaders";
}
print $clients "404 WebTV ran into a technical problem.  Please try again later. (Eric-Mac's Server Message on ($protocol:/$url2))\n\n";
$closewhendone=1;

}else{
open(FILE,"< $RealDir/ServiceVault/wtv-star/default.txt");
@stuffinherezzz=<FILE>;
close(FILE);
foreach $lineazzz (@stuffinherezzz) {
$buffererd.=$lineazzz;
}

$buffererd=processChange($buffererd);
if($skratchheaders){
print $clients "$skratchheaders";
}

print $clients $buffererd;
}
}
}
}
}
}
}
if($closewhendone){
$pickcli->remove($clients);
close($clients);
}
}elsif($command eq "halt"){
if($haltserver){
print $clients "Server is now off HALT.\n";
print $clients ".\n";
$haltserver=0;
}else{
print $clients "Server is now on HALT.\n";
print $clients ".\n";
$haltserver=1;
}
}elsif($command eq "cac"){
$haltserver=1;
foreach ($pickcli->can_write) {
print $_ "500 Im sorry but im going to now close your client by issue of command on the other side.\n\n";
$pickcli->remove($_);
close($_);
}
$haltserver=0;
}elsif($command eq "secure"){

print $clients "\x00\x00\x00\x00\x00\x00";

}elsif($command eq "help"){
$stuffsetnout="None of your bussness!\n";
print $clients "200 OK\n";
print $clients "Service: $serviceversion\n";
print $clients "Content-length: ".length($stuffsetnout)."\n";
print $clients "Content-type: text/html\n\n";
print $clients $stuffsetnout;


}elsif($command eq "recvtime"){
($hrs,$mins,$secz)=split(/\:/,$params);

foreach $clientlogx (@clientlog) {
($clientaddrz,$timelogedin)=split(/\x01/,$clientlogx);
if($clientaddrz eq $clienthost.":".$clientport){
($hrsx,$minsx,$seczx)=split(/\:/,$params);
$aax=calcSubTime($hrsx,$minsx,$seczx,$hrs,$mins,$secz);
print $clients "You loged in at $hrsx:$minsx:$seczx\n";
print $clients "Time it took for me to see your connection is $aax.\n";
}
}
$crusty=calcSubTime($hoursq,$minutesq,$secsq,$hrsx,$minsx,$seczx);
print $clients "I recived command at $hoursq:$minutesq:$secsq after connect \n";
print $clients "Time it took for me to see your command is $crusty\n";
$aa=calcSubTime($hoursq,$minutesq,$secsq,$hrs,$mins,$secz,);
print $clients "Overall time: $aa\n\n";

print $clients ".\n";
}elsif($command eq "getinfo"){
print $clients "Server-mode: $mode\n";
print $clients "Server-Client-quota: $clientsconnectsionmax\n";
print $clients "Server-address: ".$client->sockhost.":".$client->sockport."\n";
print $clients "Server-time: $hours:$minutes:$secs\n";
print $clients "Server-Active-clients: ".$pickcli->count."\n";
print $clients "Server-your-address: ".$clienthost.":".$clientport."\n";
foreach $clientlogx (@clientlog) {
($clientaddrz,$timelogedin)=split(/\x01/,$clientlogx);
print $clients "Server-Client-log: $clientaddrz loged in at $timelogedin\n";
}
print $clients ".\n";
}
}


sub getUserFile {
splice(@tidly);
$tide="";
$userssidx=$_[0];
$filenamex=$_[1];
$username=getUserName($userssidx);
open(FILE,"< $RealDir/UserDataBase/Users/$username/$filenamex");
@tidly=<FILE>;
close(FILE);
foreach $garbage (@tidly){
$tide.=$garbage;
}
return $tide;
}


sub deleteUserAccount {
$userssidx=$_[0];
$username=getUserName($userssidx);

rmdir("$RealDir/UserDataBase/Users/$username");
open(FILE,"< $RealDir/UserDataBase/users.txt");
@tidlyf=<FILE>;
close(FILE);

open(FILE,"> $RealDir/UserDataBase/users.txt");

foreach $garbage (@tidlyf){
($SSID)=split(/\:/,$garbage);
if($SSID eq $userssidx){
}else{
print FILE $garbage;
}

}
close(FILE);
}



sub deleteUserFile {
splice(@tidly);
$tide="";
$userssidx=$_[0];
$filenamex=$_[1];
$filehandletype=$_[2];
$username=getUserName($userssidx);
if($filehandletype){
rmdir("$RealDir/UserDataBase/Users/$username/$filenamex");
}else{
unlink("$RealDir/UserDataBase/Users/$username/$filenamex")
}
}


sub parseCommandsx {

$countff = 0;
$protocolxz = "";

foreach $ThingsInthere (@headersforye){
$countff++;



$headers=(index($ThingsInthere,"\r") ne (-1)) ? substr($ThingsInthere,0,index($ThingsInthere,"\r")) : $ThingsInthere;
$headersz=$ThingsInthere." ";
$command=substr($headersz,0,index($headersz," "));
$params=substr($headersz,index($headersz," ")+1);



if($countff == 1){

open(FILEE, ">> $RealDir/LOG/ClientSends.txt");
print FILEE "\n\n$headers ($clienthost:$clientport) ($hours:$minutes)\n";
close(FILE);

if($headers=~/^(GET|POST)\s*(.*)/){
$URLX = $2;
$URLX=~s/(^\/)//;
$protocolxz = substr($URLX,0,index($URLX,"/"));
$protocolxz=~s/(:|\/)//g;



open(FILEz, ">> $RealDir/LOG/SS/$protocolxz.txt");
print FILEz "\n\n$headers ($clienthost:$clientport) ($hours:$minutes)\n";
close(FILEz);
}

}else{
open(FILEE, ">> $RealDir/LOG/ClientSends.txt");
print FILEE "$headers\n";
close(FILE);

if($protocolxz){


open(FILEz, ">> $RealDir/LOG/SS/$protocolxz.txt");
print FILEz "$headers\n";
close(FILEz);
}
}

ThingsToDo();
}



sub checkWNIServerInterval {
splice(@headersforye);
foreach  (keys %wniserverinterval) {
$flashkeyframe=index($wniserverinterval{$_},"\x0D\x0A\x0D\x0A");

if($flashkeyframe != (-1)){

$zxcvbnx=substr($wniserverinterval{$_},0,$flashkeyframe);
$targetWITVL=index($wniserverinterval{$_},"\x0D\x0A\x0D\x0A")+4;

$zxcvbn_x=substr($wniserverinterval{$_},$targetWITVL);


@zxcvbn=split(/\x0D\x0A/,$zxcvbnx);
$looseControl=0;
push(@zxcvbn,"");
foreach $benevilant (@zxcvbn) {
$command=substr($benevilant,0,index($benevilant," "));
$params=substr($benevilant,index($benevilant," ")+1);


if(!(length($command))){

if($looseControl){
if(length($zxcvbn_x) == ($lenofexcess) || (length($zxcvbn_x) > ($lenofexcess))){
push(@headersforye,"$zxcvbn_x");
delete $wniserverinterval{$_};
parseCommandsx();
}

}else{
delete $wniserverinterval{$_};
parseCommandsx();
}

}else{

if($command eq "Content-length:"){
$looseControl=1;
$lenofexcess=substr($params,0,length($params));
}

push(@headersforye,"$benevilant");


}



}
}
}
}


sub addToUserFile {
$userssidx=$_[0];
$filenamex=$_[1];
$contentsxtc=$_[2];
$writeOver=$_[3];
$username=getUserName($userssidx);
if($writeOver){
open(FILE,"> $RealDir/UserDataBase/Users/$username/$filenamex");
}else{
open(FILE,">> $RealDir/UserDataBase/Users/$username/$filenamex");
}

print FILE "$contentsxtc";
close(FILE);
}


sub getUserHumanNameL {
$userssidx=$_[0];
open(FILE,"< $RealDir/UserDataBase/users.txt");
@tidlyf=<FILE>;
close(FILE);
foreach $garbage (@tidlyf){
chop($garbage);
($SSID,$UserID,$UserName,$HumanNameF,$HumanNamL)=split(/\:/,$garbage);
if($SSID eq $userssidx){
return $HumanNamL;
}
}
return "Disabled";
}


sub getUserHumanNameF {
$userssidx=$_[0];
open(FILE,"< $RealDir/UserDataBase/users.txt");
@tidlyf=<FILE>;
close(FILE);
foreach $garbage (@tidlyf){
chop($garbage);
($SSID,$UserID,$UserName,$HumanNameF,$HumanNamL)=split(/\:/,$garbage);
if($SSID eq $userssidx){
return $HumanNameF;
}
}
return "Account";
}



sub isAtTerm {
$userssidx=$_[0];
$Termin="";
open(FILE,"< $RealDir/UserDataBase/users.txt");
@tidlyf=<FILE>;
close(FILE);
foreach $garbage (@tidlyf){
chop($garbage);
($SSID,$UserID,$UserName,$HumanNameF,$HumanNamL,$Protect,$Termin)=split(/\:/,$garbage);
if($SSID eq $userssidx){
return $Termin;
}
}
return "0";
}



sub getUserID {
$userssidx=$_[0];
open(FILE,"< $RealDir/UserDataBase/users.txt");
@tidlyf=<FILE>;
close(FILE);
foreach $garbage (@tidlyf){
chop($garbage);
($SSID,$UserID,$UserName,$HumanNameF,$HumanNamL)=split(/\:/,$garbage);
if($SSID eq $userssidx){
return $UserID;
}
}
return "124";
}

sub getUserName {
$userssidx=$_[0];
$bypass=$_[1];
if(($bypass)){
open(FILE,"< $RealDir/UserDataBase/users.txt");
@tidlyf=<FILE>;
close(FILE);
foreach $garbage (@tidlyf){
chop($garbage);
($SSID,$UserID,$UserName)=split(/\:/,$garbage);
if($SSID eq $userssidx){
return $UserName;
}
}
return "AccountDisabled";
}else{
if(matchInDB($clienthost,8,1) != "NOPE"){

return getformDB($MyLoc,8);
}else{
return "AccountDisabled";
}
}

}


sub matchUsername {
$usercomname=$_[0];

open(FILE,"< $RealDir/UserDataBase/users.txt");
@tidlyf=<FILE>;
close(FILE);


foreach $garbage (@tidlyf){
chop($garbage);
($SSID,$UserID,$UserName)=split(/\:/,$garbage);
if($usercomname eq $UserName){
return 1;
}
}
return 0;
}


close(FILE);
$cmeb=0;
$looseControl=0;
splice(@headersforye);
$counterme=0;
$fullguy="";
$lenofexcess=0;
$theRestGoesAlong=0;
$protocolz="";
$bigboat=0;

}
return 1;
}

On *:*:1:{
if($mode == 4){
if(($haltserver) && !($headersv eq "HALT\r\n\r\n")){
print $clients "500 The server is not accepting any requests at this point.\n\n";
}else{
$ignoreelse++;
if($ignoreelse > 2){
$wniserverinterval{$clients} .= $headersv;


#%wniserverinterval=addToWNIInterval($clients,$headersv);
checkWNIServerInterval();
}
}
$exec=0;
}
return 1;
}



